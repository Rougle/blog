<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="e7ca5a28-e189-4724-9781-e5bd922553ed" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="1" />
  </component>
  <component name="ProjectId" id="1PjUDJqfnDMejoS31duIbgyDqaT" />
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$/resources/migrations" />
    <property name="settings.editor.selected.configurable" value="reference.settings.ide.settings.notifications" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/resources/migrations" />
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="ReplState" timestamp="1566842088223">{:repl-history {:ide [], :local [], :remote [{:command &quot;(reset-autobuild)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(cljs-repl)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(create-migration add-blog-entries-table)&quot;, :offset 41, :ns &quot;user&quot;} {:command &quot;(create-migration \&quot;add-blog-entries-table\&quot;)&quot;, :offset 43, :ns &quot;user&quot;} {:command &quot;(defn test-function []\n  (+ 1 1))&quot;, :offset 33, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;(test-function)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;( use 'figwheel-sidecar.repl-api)&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(defn post-entry! [{:keys [id created last_modified author_id header summary content]}]\n  (try\n    (db/create-entry!\n       {:id id\n        :created created\n        :last_modified last_modified\n        :author_id author_id\n        :header header\n        :summary summary\n        :content content})\n    (catch Exception e\n      (log/error e))))&quot;, :offset 343, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;()&quot;, :offset 1} {:command &quot;(defn post-entry! [{:keys [id created last_modified author_id header summary content]}]\n  (try\n    (db/create-entry!\n      {:id            id\n       :create        Timestamp\n       :last_modified Timestamp\n       :author_id     author_id\n       :header        header\n       :summary       summary\n       :content       content})\n    (catch Exception e\n      (log/error e))))&quot;, :offset 374, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;(post-entry!)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/post-entry!)&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(defn post-entry! [{:keys [id author_id header summary content]}]\n  (try\n    (db/create-entry!\n      {:id            id\n       :created       Timestamp\n       :last_modified Timestamp\n       :author_id     author_id\n       :header        header\n       :summary       summary\n       :content       content})\n    (catch Exception e\n      (log/error e))))&quot;, :offset 352, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;java.sql.Timestamp&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(java.sql.Timestamp)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(ns blogger.routes.services.blog\n  (:require [blogger.db.core :as db]\n            [clojure.tools.logging :as log])\n  (:import (java.sql Timestamp)))&quot;, :offset 148, :ns &quot;user&quot;} {:command &quot;(Timestamp)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(.getTime)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(new java.util.Date)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/post-entry! :id \&quot;foo\&quot; :author_id \&quot;foo\&quot; :header \&quot;header test\&quot; :summary \&quot;summary test\&quot; :content \&quot;content test\&quot;)&quot;, :offset 139, :ns &quot;user&quot;} {:command &quot;(defn get-entries []\n  (try\n    (db/get-entries)\n    (catch Exception eduction (log/error e))))&quot;, :offset 95, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;(defn get-entries []\n  (try\n    (db/get-entries)\n    (catch Exception e (log/error e))))&quot;, :offset 88, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;(defn post-entry! [{:keys [id author_id header summary content]}]\n  (try\n    (db/create-entry!\n      {:id            id\n       :created       (new java.util.Date)\n       :last_modified (new java.util.Date)\n       :author_id     author_id\n       :header        header\n       :summary       summary\n       :content       content})\n    (catch Exception e\n      (log/error e))))&quot;, :offset 374, :ns &quot;blogger.routes.services.blog&quot;} {:command &quot;(s/defschema Entry\n  {:id String\n   :created java.util.Date.\n   :author_id String\n   :header String\n   :summary String\n   :content String})&quot;, :offset 139, :ns &quot;blogger.routes.services&quot;} {:command &quot;(ns blogger.routes.services\n  (:require\n    [reitit.swagger :as swagger]\n    [reitit.swagger-ui :as swagger-ui]\n    [reitit.ring.coercion :as coercion]\n    [reitit.coercion.spec :as spec-coercion]\n    [reitit.ring.middleware.muuntaja :as muuntaja]\n    [reitit.ring.middleware.multipart :as multipart]\n    [reitit.ring.middleware.parameters :as parameters]\n    [blogger.middleware.formats :as formats]\n    [blogger.middleware.exception :as exception]\n    [ring.util.http-response :refer :all]\n    [clojure.java.io :as io]\n    [blogger.routes.services.blog :as blog]\n    [schema.core :as schema]))&quot;, :offset 595, :ns &quot;user&quot;} {:command &quot;(schema/defschema Entry\n  {:id String\n   :created java.util.Date.\n   :author_id String\n   :header String\n   :summary String\n   :content String})&quot;, :offset 144, :ns &quot;blogger.routes.services&quot;} {:command &quot;(schema/defschema Entry\n  {:id String\n   :created String\n   :author_id String\n   :header String\n   :summary String\n   :content String})&quot;, :offset 135, :ns &quot;blogger.routes.services&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion spec-coercion/coercion\n    :muuntaja formats/instance\n    :swagger {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc true\n        :swagger {:info {:title \&quot;my-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   [\&quot;/ping\&quot;\n    {:get (constantly (ok {:message \&quot;pong\&quot;}))}]\n\n\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    [\&quot;/entries\&quot;\n     {:get {:summary \&quot;Gets all entries\&quot;\n            :responses {200 {:body Entry}}\n            :handler (blog/get-entries)}\n      :post {:summary \&quot;post entry\&quot;\n             :parameters {:body NewEntry}\n             :responses {200 {:body Entry}}\n             :handler (blog/post-entry! :body)}}]]\n\n\n   [\&quot;/math\&quot;\n    {:swagger {:tags [\&quot;math\&quot;]}}\n\n    [\&quot;/plus\&quot;\n     {:get {:summary \&quot;plus with spec query parameters\&quot;\n            :parameters {:query {:x int?, :y int?}}\n            :responses {200 {:body {:total pos-int?}}}\n            :handler (fn [{{{:keys [x y]} :query} :parameters}]\n                       {:status 200\n                        :body {:total (+ x y)}})}\n      :post {:summary \&quot;plus with spec body parameters\&quot;\n             :parameters {:body {:x int?, :y int?}}\n             :responses {200 {:body {:total pos-int?}}}\n             :handler (fn [{{{:keys [x y]} :body} :parameters}]\n                        {:status 200\n                         :body {:total (+ x y)}})}}]]\n\n   [\&quot;/files\&quot;\n    {:swagger {:tags [\&quot;files\&quot;]}}\n\n    [\&quot;/upload\&quot;\n     {:post {:summary \&quot;upload a file\&quot;\n             :parameters {:multipart {:file multipart/temp-file-part}}\n             :responses {200 {:body {:name string?, :size int?}}}\n             :handler (fn [{{{:keys [file]} :multipart} :parameters}]\n                        {:status 200\n                         :body {:name (:filename file)\n                                :size (:size file)}})}}]\n\n    [\&quot;/download\&quot;\n     {:get {:summary \&quot;downloads a file\&quot;\n            :swagger {:produces [\&quot;image/png\&quot;]}\n            :handler (fn [_]\n                       {:status 200\n                        :headers {\&quot;Content-Type\&quot; \&quot;image/png\&quot;}\n                        :body (-&gt; \&quot;public/img/warning_clojure.png\&quot;\n                                  (io/resource)\n                                  (io/input-stream))})}}]]])&quot;, :offset 3240, :ns &quot;blogger.routes.services&quot;} {:command &quot;(blogger.routes.services.blog/post-entry! {:id \&quot;foo\&quot; :author_id \&quot;foo\&quot; :header \&quot;header test\&quot; :summary \&quot;summary test\&quot; :content \&quot;content test\&quot;})&quot;, :offset 141, :ns &quot;user&quot;} {:command &quot;(schema/defschema NewEntry\n  {:id String\n   :author_id String\n   :header String\n   :summaryentry String\n   :content String})&quot;, :offset 124, :ns &quot;blogger.routes.services&quot;} {:command &quot;(NewEntry)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(use figwheel-sidecar.repl-api)&quot;, :offset 31, :ns &quot;user&quot;} {:command &quot;(use 'figwheel-sidecar.repl-api)&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(start-figwheel!)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/post-entry! {:id \&quot;foo\&quot; :author_id \&quot;foo\&quot; :header \&quot;test header\&quot; :summary \&quot;this the blog summary\&quot; :content \&quot;this the blog content\&quot;})&quot;, :offset 159, :ns &quot;user&quot;} {:command &quot;(java.util.Date)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(java.util.Date.)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion   spec-coercion/coercion\n    :muuntaja   formats/instance\n    :swagger    {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc  true\n        :swagger {:info {:title       \&quot;my-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url    \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   [\&quot;/ping\&quot;\n    {:get (constantly (ok {:message \&quot;pong\&quot;}))}]\n\n\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    ;;TODO\n    [\&quot;/entries\&quot;\n     {:get {:summary   \&quot;Gets all entries\&quot;\n            :responses {200 {:body [:id :author_id :created :last_modified :header :summary :content]}}\n            :handler   (blog/get-entries)\n      }}]]\n\n   [\&quot;/math\&quot;\n    {:swagger {:tags [\&quot;math\&quot;]}}\n\n    [\&quot;/plus\&quot;\n     {:get  {:summary    \&quot;plus with spec query parameters\&quot;\n             :parameters {:query {:x int?, :y int?}}\n             :responses  {200 {:body {:total pos-int?}}}\n             :handler    (fn [{{{:keys [x y]} :query} :parameters}]\n                           {:status 200\n                            :body   {:total (+ x y)}})}\n      :post {:summary    \&quot;plus with spec body parameters\&quot;\n             :parameters {:body {:x int?, :y int?}}\n             :responses  {200 {:body {:total pos-int?}}}\n             :handler    (fn [{{{:keys [x y]} :body} :parameters}]\n                           {:status 200\n                            :body   {:total (+ x y)}})}}]]\n\n  ])&quot;, :offset 2347, :ns &quot;blogger.routes.services&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion   spec-coercion/coercion\n    :muuntaja   formats/instance\n    :swagger    {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc  true\n        :swagger {:info {:title       \&quot;my-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url    \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   [\&quot;/ping\&quot;\n    {:get (constantly (ok {:message \&quot;pong\&quot;}))}]\n\n\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    ;;TODO\n    [\&quot;/entries\&quot;\n     {:get {:summary   \&quot;Gets all entries\&quot;\n            :responses {200 {:body any?}}\n            :handler   (blog/get-entries)\n      }}]]\n\n   [\&quot;/math\&quot;\n    {:swagger {:tags [\&quot;math\&quot;]}}\n\n    [\&quot;/plus\&quot;\n     {:get  {:summary    \&quot;plus with spec query parameters\&quot;\n             :parameters {:query {:x int?, :y int?}}\n             :responses  {200 {:body {:total pos-int?}}}\n             :handler    (fn [{{{:keys [x y]} :query} :parameters}]\n                           {:status 200\n                            :body   {:total (+ x y)}})}\n      :post {:summary    \&quot;plus with spec body parameters\&quot;\n             :parameters {:body {:x int?, :y int?}}\n             :responses  {200 {:body {:total pos-int?}}}\n             :handler    (fn [{{{:keys [x y]} :body} :parameters}]\n                           {:status 200\n                            :body   {:total (+ x y)}})}}]]\n\n  ])&quot;, :offset 2285, :ns &quot;blogger.routes.services&quot;} {:command &quot;(blogger.routes.services.blog/post-entry! {:id \&quot;foo 2\&quot; :author_id \&quot;foo\&quot; :header \&quot;test header\&quot; :summary \&quot;this the blog summary\&quot; :content \&quot;this the blog content\&quot;})&quot;, :offset 161, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/get-entries)&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/get-entry :id \&quot;foo 2\&quot;)&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/get-entry {:id \&quot;foo 2\&quot;})&quot;, :offset 54, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/update-entry! \&quot;foo 2\&quot; \&quot;updated header\&quot; \&quot;updated sumamry\&quot; \&quot;updated content\&quot;)&quot;, :offset 105, :ns &quot;user&quot;} {:command &quot;(blogger.routes.services.blog/get-entry \&quot;foo 2\&quot;)&quot;, :offset 48, :ns &quot;user&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion   spec-coercion/coercion\n    :muuntaja   formats/instance\n    :swagger    {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc  true\n        :swagger {:info {:title       \&quot;blog-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url    \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   ;; TODO Fix user-id author-id relation in db and in queries\n   ;; TODO Add authentication\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    ;; TODO Decide on what to return on what and fix spec errors in responses\n    [\&quot;/entries\&quot;\n     {:get {:summary   \&quot;Gets all entries\&quot;\n            :responses {200 {:body [::entry]}}\n            :handler   (fn [req]\n                         (ok (blog/get-entries)))}}]\n    [\&quot;/entry\&quot;\n     :post {:summary   \&quot;Creates a new blog entry\&quot;\n            :parameters {:body {:new_entry ::new_entry}}\n            :responses {201 {:body {:res any?}}}\n            :handler   (fn [{{{:keys [new_entry]} :body} :parameters}]\n                         (created (blog/post-entry! new_entry)))}\n\n     [\&quot;/:id\&quot;\n      {:get   {:summary   \&quot;Gets a single entry by id\&quot;\n               :parameters {:path {:id string?}}\n               :responses {200 {:body ::entry}}\n               :handler   (fn [{{{:keys [id]} :path} :parameters}]\n                           (ok (blog/get-entry id)))\n               }\n\n      :delete {:summary   \&quot;Deletes a blog entry\&quot;\n               :parameters {:path {:id string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id]} :path} :parameters}]\n                             (ok (blog/delete-entry! id)))\n               }\n      ;; TODO Figure out smart way to parse both path and body params\n      :post   {:summary   \&quot;Updates a blog entry\&quot;\n               :parameters {:path {:id string?}\n                            :body {:header string? :summary string? :content string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id header summary content]} :body} :parameters}]\n                             (ok (blog/update-entry! id header summary content)))\n               }\n      }]]]])&quot;, :offset 3107, :ns &quot;blogger.routes.services&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion   spec-coercion/coercion\n    :muuntaja   formats/instance\n    :swagger    {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc  true\n        :swagger {:info {:title       \&quot;blog-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url    \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   ;; TODO Fix user-id author-id relation in db and in queries\n   ;; TODO Add authentication\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    ;; TODO Decide on what to return on what and fix spec errors in responses\n    [\&quot;/entries\&quot;\n     {:get {:summary   \&quot;Gets all entries\&quot;\n            :responses {200 {:body [::entry]}}\n            :handler   (fn [req]\n                         (ok (blog/get-entries)))}}]\n    [\&quot;/entry\&quot;\n     {:post {:summary   \&quot;Creates a new blog entry\&quot;\n            :parameters {:body {:new_entry ::new_entry}}\n            :responses {201 {:body {:res any?}}}\n            :handler   (fn [{{{:keys [new_entry]} :body} :parameters}]\n                         (created (blog/post-entry! new_entry)))}}\n\n     [\&quot;/:id\&quot;\n      {:get   {:summary   \&quot;Gets a single entry by id\&quot;\n               :parameters {:path {:id string?}}\n               :responses {200 {:body ::entry}}\n               :handler   (fn [{{{:keys [id]} :path} :parameters}]\n                           (ok (blog/get-entry id)))\n               }\n\n      :delete {:summary   \&quot;Deletes a blog entry\&quot;\n               :parameters {:path {:id string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id]} :path} :parameters}]\n                             (ok (blog/delete-entry! id)))\n               }\n      ;; TODO Figure out smart way to parse both path and body params\n      :post   {:summary   \&quot;Updates a blog entry\&quot;\n               :parameters {:path {:id string?}\n                            :body {:header string? :summary string? :content string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id header summary content]} :body} :parameters}]\n                             (ok (blog/update-entry! id header summary content)))\n               }\n      }]]]])&quot;, :offset 3109, :ns &quot;blogger.routes.services&quot;} {:command &quot;(stop)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(start)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(defn service-routes []\n  [\&quot;/api\&quot;\n   {:coercion   spec-coercion/coercion\n    :muuntaja   formats/instance\n    :swagger    {:id ::api}\n    :middleware [;; query-params &amp; form-params\n                 parameters/parameters-middleware\n                 ;; content-negotiation\n                 muuntaja/format-negotiate-middleware\n                 ;; encoding response body\n                 muuntaja/format-response-middleware\n                 ;; exception handling\n                 exception/exception-middleware\n                 ;; decoding request body\n                 muuntaja/format-request-middleware\n                 ;; coercing response bodys\n                 coercion/coerce-response-middleware\n                 ;; coercing request parameters\n                 coercion/coerce-request-middleware\n                 ;; multipart\n                 multipart/multipart-middleware]}\n\n   ;; swagger documentation\n   [\&quot;\&quot; {:no-doc  true\n        :swagger {:info {:title       \&quot;blog-api\&quot;\n                         :description \&quot;https://cljdoc.org/d/metosin/reitit\&quot;}}}\n\n    [\&quot;/swagger.json\&quot;\n     {:get (swagger/create-swagger-handler)}]\n\n    [\&quot;/api-docs/*\&quot;\n     {:get (swagger-ui/create-swagger-ui-handler\n             {:url    \&quot;/api/swagger.json\&quot;\n              :config {:validator-url nil}})}]]\n\n   ;; TODO Fix user-id author-id relation in db and in queries\n   ;; TODO Add authentication\n   [\&quot;/blog\&quot;\n    {:swagger {:tags [\&quot;blog\&quot;]}}\n\n    ;; TODO Decide on what to return on what and fix spec errors in responses\n    [\&quot;/entries\&quot;\n     {:get {:summary   \&quot;Gets all entries\&quot;\n            :responses {200 {:body [::entry]}}\n            :handler   (fn [req]\n                         (ok (blog/get-entries)))}}]\n    [\&quot;/entry\&quot;\n     {:post {:summary   \&quot;Creates a new blog entry\&quot;\n            :parameters {:body {:new_entry ::new_entry}}\n            :responses {201 {:body {:res any?}}}\n            :handler   (fn [{{{:keys [new_entry]} :body} :parameters}]\n                         (created (blog/post-entry! new_entry)))}}]\n\n     [\&quot;/entry/:id\&quot;\n      {:get   {:summary   \&quot;Gets a single entry by id\&quot;\n               :parameters {:path {:id string?}}\n               :responses {200 {:body ::entry}}\n               :handler   (fn [{{{:keys [id]} :path} :parameters}]\n                           (ok (blog/get-entry id)))\n               }\n\n      :delete {:summary   \&quot;Deletes a blog entry\&quot;\n               :parameters {:path {:id string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id]} :path} :parameters}]\n                             (ok (blog/delete-entry! id)))\n               }\n\n      ;; TODO Figure out smart way to parse both path and body params\n      :post   {:summary   \&quot;Updates a blog entry\&quot;\n               :parameters {:path {:id string?}\n                            :body {:header string? :summary string? :content string?}}\n               :responses  {200 {:body {:res any?}}}\n               :handler    (fn [{{{:keys [id header summary content]} :body} :parameters}]\n                             (ok (blog/update-entry! id header summary content)))\n               }\n      }]]])&quot;, :offset 3116, :ns &quot;blogger.routes.services&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.DockerRepl">
    <configuration name="DockerRepl" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="blogger" />
      <setting name="host" value="localhost" />
      <setting name="port" value="7000" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="REPL for blogger" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="blogger" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <module name="blogger" />
      <setting name="host" value="localhost" />
      <setting name="port" value="7000" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.DockerRepl" />
      <item itemvalue="Clojure REPL.REPL for blogger" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for blogger" />
      </list>
    </recent_temporary>
  </component>
  <component name="StructuralSearchPlugin">
    <searchConfiguration name="user defined" created="1566599802478" text="start-repl" recursive="true" caseInsensitive="true" type="JAVA" pattern_context="default" scope_type="PROJECT" scope_descriptor="" history="1">
      <constraint name="__context__" within="" contains="" />
    </searchConfiguration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e7ca5a28-e189-4724-9781-e5bd922553ed" name="Default Changelist" comment="" />
      <created>1566386878393</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1566386878393</updated>
    </task>
    <servers />
  </component>
</project>